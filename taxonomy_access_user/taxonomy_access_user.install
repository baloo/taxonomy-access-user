<?php
// $Id$
/**
 * @file
 * This file adds information for module install and uninstall
 */

function taxonomy_access_user_schema() {
  $schema['term_access_user'] = array(
    'description' => t('The table for term access'),
    'fields' => array(
      'tauid' => array(
        'description' => t('The primary identifier for a term access.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'tid' => array(
        'description' => t('The primary identifier for a term.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'uid' => array(
        'description' => t('The primary identifier for a user.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'grant_view' => array(
        'description' => 'Boolean indicating whether a user with the realm/grant pair can view this term.',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny'),
      'grant_update' => array(
        'description' => 'Boolean indicating whether a user with the realm/grant pair can edit this term.',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny'),
      'grant_delete' => array(
        'description' => 'Boolean indicating whether a user with the realm/grant pair can delete this term.',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny'),
      'grant_admin' => array(
        'description' => 'Boolean indicating whether a user with the realm/grant pair can admin this term.',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny'),
    ),
    'primary key' => array('tauid'),
    'unique keys' => array(
      'uid_tid' => array('uid', 'tid')
    ),
  );

  return $schema;
}

/**
 * Implementation of hook_enable().
 * Installs the sql functions
 */
function taxonomy_access_user_enable() {
  module_load_include('inc', 'taxonomy_access_user');
  taxonomy_access_user_sql_uninstall();
  taxonomy_access_user_sql_install();
}

function taxonomy_access_user_install() {
  drupal_install_schema('taxonomy_access_user');
  variable_set('taxonomy_access_user_vids', array());
}

function taxonomy_access_user_uninstall() {
  drupal_uninstall_schema('taxonomy_access_user');
}



/**
 * Function that will delete custom functions in the sql
 */
function taxonomy_access_user_sql_uninstall() {
  global $db_type;

  $ops = array('view', 'update', 'delete', 'admin');
  switch ($db_type) {
  case 'mysql':
  case 'mysqli':
  case 'pgsql':
    $sql = 'DROP FUNCTION IF EXISTS {grant_%op};';
    break;
  }

  foreach ($ops as $op) {
    db_query(str_replace('%op', $op, $sql));
  }
}

/**
 * Function that will add custom functions in the sql
 */
function taxonomy_access_user_sql_install() {
  global $db_type, $active_db;

  $ops = array('view', 'update', 'delete', 'admin');
  $grant = array();

  switch ($db_type) {
  case 'mysql':
  case 'mysqli':
    $grant[] = <<<EOF
CREATE FUNCTION {grant_%op} (atid INT, auid INT)
RETURNS INT
DETERMINISTIC
BEGIN
  DECLARE my%op INT DEFAULT 0;
  DECLARE curtid INT;
  SET curtid = atid;

  main_loop: LOOP
    SELECT grant_%op INTO my%op FROM {term_access_user} tau WHERE tau.tid = curtid AND tau.uid = auid LIMIT 1;
    IF my%op = 1 THEN
      LEAVE main_loop;
    END IF;
    IF my%op = -1 THEN
      LEAVE main_loop;
    END IF;
    SELECT parent INTO curtid FROM {term_hierarchy} WHERE tid = curtid LIMIT 1;
    IF curtid = 0 THEN
      LEAVE main_loop;
    END IF;
  END LOOP main_loop;
  RETURN my%op;
END
EOF;
    break;
  case 'pgsql':
    $grant[] = <<<EOF
CREATE LANGUAGE plpgsql;
CREATE FUNCTION {grant_%op}(atid INT, auid INT) RETURNS INT AS $$
DECLARE
  my%op integer := 0;
  curtid integer;
BEGIN
  curtid := atid;
  LOOP
    SELECT INTO my%op grant_%op FROM {term_access_user} tau WHERE tau.tid = curtid AND tau.uid = auid;
    IF my%op = 1 THEN
      EXIT;
    END IF;
    IF my%op = -1 THEN
      EXIT;
    END IF;
    SELECT INTO curtid parent FROM {term_hierarchy} WHERE tid = curtid;
    IF curtid = 0 THEN
      EXIT;
    END IF;
  END LOOP;
  RETURN my%op;
END;
$$ LANGUAGE plpgsql;
EOF;
    break;
  default:
    return NULL;
  }
  $grants = array();

  foreach ($ops as $op) {
    foreach ($grant as $query) {
      $grants[$op][] = str_replace('%op', $op, $query);
    }
  }

  unset($grant);

  foreach ($grants as $grant) {
    foreach ($grant as $query) {
      db_query($query);
    }
  }
}





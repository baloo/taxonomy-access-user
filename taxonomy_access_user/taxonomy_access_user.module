<?php
// $Id$
/**
 * @file
 * Main file of the taxonomy access user module
 * This module adds taxonomy based access control for users
 */


define('TAXONOMY_ACCESS_USER_TABLE', 'term_access_user');

/**
 * Implementation of hook_form_alter().
 * Control access to form creation
 */
function taxonomy_access_user_form_alter(&$form, $form_state, $form_id) {
  // If the form is a node form
  if (substr($form_id, -10, 10) !== '_node_form') {
    return NULL;
  }



  // If the form has taxonomy
  if (isset($form['taxonomy'])) {
    foreach ($form['taxonomy'] as $vid => $taxonomy) {

      // Sanity check
      if (is_array($taxonomy) && isset($taxonomy['#type'])) {

        // If the taxonomy is value
        if ($taxonomy['#type'] === 'value') {

          //Verify the vid is handled by the module
          if (array_search($vid, variable_get('taxonomy_access_user_vids', array())) !== FALSE) {
            $term  = taxonomy_get_term($taxonomy['#value']);

            // Verify the user may add/edit the node
            if (taxonomy_access_user_control('access', $term, array('grant_update')) === FALSE) {

              // Return access denied
              drupal_access_denied();
              die();
            }
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 * Add a permission link to the term list
 */
function taxonomy_access_user_form_taxonomy_overview_terms_alter(&$form, $form_state) {
  module_load_include('inc', 'taxonomy_access_user');

  // We will change the taxonomy_overview_term form behaviour to add 'edit permissions' link

  foreach (element_children($form) as $key) {
    // Get keys like tid:<tid>:0
    if (!isset($form[$key]['#term']) || !isset($form[$key]['#term']['tid'])) {
      continue;
    }

    if (_taxonomy_access_user_access(taxonomy_get_term($form[$key]['#term']['tid']), array('grant_admin' => 1))) {
      // Adding a level into the edit array
      $form[$key]['edit']['edit']['#value'] = $form[$key]['edit']['#value'];
      unset($form[$key]['edit']['#value']);

      // Adding spacer to make the table look better
      $form[$key]['edit']['spacer'] = array(
        '#value' => ' - ',
      );

      // Adding the real 'edit permissions' link
      $form[$key]['edit']['taxonomy_access_user'] = array(
        '#value' => l(
          t('edit permissions'),
          'taxonomy/access/edit/term/'. $form[$key]['#term']['tid'],
          array('query' => drupal_get_destination())
        ),
      );
    }
  }
}


/**
 * Implementation of hook_help().
 * Add link 'add permission' to the permission list page
 */
function taxonomy_access_user_help($path, $arg) {
  switch ($path) {
  case 'taxonomy/access/edit/term/%':
    $term = taxonomy_get_term($arg[4]);
    return '<p>'. t('Here are permissions associated to the term %term.',
      array(
        '%term' => check_plain($term->name),
      )
    ) .'</p><p>'.
    l(
      t('Add a new permission'),
      'taxonomy/access/edit/term/'. $term->tid .'/add/access',
      array(
        'attributes' => array(
          'class' => 'popups-form-reload'
        ),
        'query' => drupal_get_destination(),
      )
    ) .'</p>';
  }
}


function taxonomy_access_user_control($op, $term, $access = NULL, $account = NULL) {
  global $user;

  if ($account === NULL) {
    $account = $user;
  }


  if (!is_null($access) && !is_array($access)) {
    watchdog('taxonomy access user', 'Wrong parameters passed to taxonomy_access_user_control() : $access argument is neither NULL nor array');
    return NULL;
  }

  switch ($op) {
  case 'add':
    if (is_null($access)) {
      watchdog('taxonomy access user', 'Wrong parameters passed to taxonomy_access_user_control() : $access argument required');
      return NULL;
    }

    $ops = array('view', 'update', 'delete', 'admin');

    $term_access_user = array(
      'tid'           => $term->tid,
      'uid'           => $account->uid,
    );

    foreach ($ops as $op) {
      $term_access_user['grant_'. $op] = (isset($access['grant_'. $op])? $access['grant_'. $op] : 0);
    }

    if (!$tauid = db_result(db_query_range('SELECT tauid FROM {term_access_user} WHERE tid = %d AND uid = %d', $term->tid, $account->uid, 0, 1))) {
      drupal_write_record('term_access_user', $term_access_user);
    }
    else {
      $term_access_user['tauid'] = $tauid;
      drupal_write_record('term_access_user', $term_access_user, array('tauid'));
    }


    return $term_access_user['tauid'];
    break;
  case 'del':
  case 'delete':
    db_query('DELETE FROM {term_access_user} WHERE tid = %d AND uid = %d', $term->tid, $account->uid);
    break;
  case 'access':

    if (is_null($access)) {
      watchdog('taxonomy access user', 'Wrong parameters passed to taxonomy_access_user_control() : $access argument required');
      return NULL;
    }

    module_load_include('inc', 'taxonomy_access_user');

    return _taxonomy_access_user_access($term, $access, $account);
    break;
  default:
    return NULL;
  }
}



/**
 * Implementation of hook_nodeapi().
 * Adds a control on the add/edit node form to control which term is
 * associated to the node
 */
function taxonomy_access_user_nodeapi(&$node, $op, $a3) {

  switch ($op) {
  case 'validate':
    module_load_include('inc', 'taxonomy_access_user');

    $vids = variable_get('taxonomy_access_user_vids', array());

    if (user_access('administer taxonomy')) {
      return NULL;
    }

    if (count($vids) !== 0) {
      $taxos = array();
      if (is_array($node->taxonomy)) {
        foreach ($node->taxonomy as $vid => $tid) {
          $taxos[$tid] = new stdClass;
          $taxos[$tid]->vid = $vid;
        }

        _taxonomy_access_user_add_taxonomy_access($taxos);



        $assigned = FALSE;
        $update = FALSE;
        foreach ($taxos as $tid => $taxo) {
          if (in_array($taxo->vid, $vids)) {
            $assigned = TRUE;
            if ($taxo->grant_update === '-1') {
              $update = FALSE;
              break;
            }
            if ($taxo->grant_update === '1') {
              $update = TRUE;
            }
          }
        }

        if ($assigned && !$update) {
          $type = node_get_types('type', $node);
          form_set_error('taxonomy', t("You are not allowed to submit %nodetype in this taxonomy", array('%nodetype' => $type->name)));
          return;
        }
      }
    }
    break;
  }
}

/**
 * Implementation of hook_node_access_records().
 * Returns the grant id related to the node and their access
 */
function taxonomy_access_user_node_access_records($node) {
  module_load_include('inc', 'taxonomy_access_user');

  $vids = variable_get('taxonomy_access_user_vids', array());
  $terms = array();
  foreach ($vids as $vid) {
    $terms = array_merge(
      $terms,
      taxonomy_node_get_terms_by_vocabulary($node, $vid));
  }


  $tids = array();
  if (count($terms)) {
    // Fetch all parent tids
    $all_tids = array();
    foreach ($terms as $term) {
      $temp_terms = taxonomy_get_parents_all($term->tid);
      foreach ($temp_terms as $tid) {
        $all_tids[] = $tid->tid;
      }
    }

    // Fetch all users who may access the node
    $result = db_query("SELECT DISTINCT uid FROM {term_access_user} WHERE tid IN (". db_placeholders($all_tids) .")", $all_tids);
    $uids = array();
    while ($row = db_fetch_object($result)) {
      $uids[] = $row->uid;
    }

    $grants = array();

    // Make the work for each uids
    foreach ($uids as $uid) {
      // For each "base" term
      foreach ($terms as $term) {
        $parent = -1;
        $myterm = $term;

        $done_grants = array();

        while ($parent != 0) {
          $result = db_query("SELECT tauid, grant_view, grant_update, grant_delete
            FROM {term_access_user}
            WHERE uid = %d AND tid = %d", $uid, $myterm->tid);
          if ($row = db_fetch_object($result)) {
            if ($row->grant_view != 0 ||
              $row->grant_update != 0 ||
              $row->grant_delete != 0) {

              // Add a grant
              $grants[] = array(
                'realm' => 'taxonomy_access_user',
                'gid' => $row->tauid,
                'grant_view' => (isset($done_grants['grant_view']) === FALSE && $row->grant_view == 1)?1:0,
                'grant_update' => (isset($done_grants['grant_update']) === FALSE && $row->grant_update == 1)?1:0,
                'grant_delete' => (isset($done_grants['grant_delete']) === FALSE && $row->grant_delete == 1)?1:0,
              );
            }
            if ($row->grant_view != 0) {
              $done_grants['grant_view'] = 1;
            }
            if ($row->grant_update != 0) {
              $done_grants['grant_update'] = 1;
            }
            if ($row->grant_delete != 0) {
              $done_grants['grant_delete'] = 1;
            }
          }

          // If we're done with this uid/term then break the loop
          if (count($done_grants) === 3) {
            break;
          }

          // Getting the parent for inheritance
          $myterms = taxonomy_get_parents($myterm->tid);
          // If we're at root => break loop
          if (count($myterms) === 0) {
            break;
          }

          $myterm = reset($myterms);
          $parent = $myterm->tid;
        }
      }
    }

    return $grants;
  }
}


/**
 * Implementation of hook_node_grants().
 * Returns the gid the user may access
 */
function taxonomy_access_user_node_grants($account, $op) {
  $grants = array();

  $result = db_query('SELECT tauid FROM {term_access_user} WHERE uid = %d', $account->uid);

  while ($tauid = db_fetch_object($result)) {
    $tauids[] = $tauid->tauid;
  }

  if (count($tauids)) {
    $grants['taxonomy_access_user'] = $tauids;
    return $grants;
  }
}

/**
 * Implementation of hook_menu_alter().
 */
function taxonomy_access_user_menu_alter(&$items) {
  if (!isset($items['admin/content/taxonomy/%taxonomy_vocabulary'])) {
    // This element permit user that don't have the "adminiter taxonomy" permission
    // to access taxonomy term list and display a nice for to edit permissions of a
    // vocabulary
    $items['admin/content/taxonomy/%taxonomy_vocabulary']['access callback'] = 'taxonomy_access_user_vocabulary_admin';
    $items['admin/content/taxonomy/%taxonomy_vocabulary']['access arguments'] = array(3);
  }
}


/**
 * Implementation of hook_menu().
 */
function taxonomy_access_user_menu() {
  $items = array();

  $items['taxonomy/access/edit/term/%taxonomy_access_user_term'] = array(
    'title' => 'Permissions',
    'description' => 'Term permissions.',
    'page callback' => 'taxonomy_access_user_term_edit',
    'page arguments' => array(4),
    'access callback' => 'taxonomy_access_user_control',
    'access arguments' => array('access', 4, array('grant_admin')),
    'file' => 'taxonomy_access_user.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['taxonomy/access/edit/term/%taxonomy_access_user_term/add/access'] = array(
    'title' => 'Add permissions',
    'description' => 'Term permissions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_access_user_add_access', 4),
    'access callback' => 'taxonomy_access_user_control',
    'access arguments' => array('access', 4, array('grant_admin')),
    'file' => 'taxonomy_access_user.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['taxonomy/access/edit/%taxonomy_access_user_access'] = array(
    'title' => 'Edit permission',
    'description' => 'Term permissions edit.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_access_user_access_edit', 3),
    'access callback' => 'taxonomy_access_user_access_form_access',
    'access arguments' => array(3),
    'file' => 'taxonomy_access_user.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['taxonomy/access/delete/%taxonomy_access_user_access'] = array(
    'title' => 'Delete permission',
    'description' => 'Term permissions delete.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_access_user_access_delete', 3),
    'access callback' => 'taxonomy_access_user_access_form_access',
    'access arguments' => array(3),
    'file' => 'taxonomy_access_user.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/content/taxonomy/access'] = array(
    'title' => 'Access control',
    'description' => 'Taxonomy access control',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_access_user_settings'),
    'access arguments' => array('administer taxonomy'),
    'file' => 'taxonomy_access_user.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * menu hook load missing in the taxonomy module to load a term object
 * from its tid
 */
function taxonomy_access_user_term_load($tid) {
  if (!is_numeric($tid)) {
    return FALSE;
  }

  $term = taxonomy_get_term($tid);

  return $term;
}


/**
 * menu hook load for taxonomy_access_user
 */
function taxonomy_access_user_access_load($tauid) {
  static $access;

  if (!is_numeric($tauid)) {
    return FALSE;
  }

  if (!isset($access[$tauid])) {
    $result = db_query('SELECT * FROM {term_access_user} WHERE tauid = %d', $tauid);
    $access[$tauid] = db_fetch_object($result);
  }

  return $access[$tauid];
}

/**
 * Controls whether as user may admin a term of a vocabulary
 */
function taxonomy_access_user_vocabulary_admin($vocabulary, $account = NULL) {
  global $user;

  if ($account === NULL) {
    $account = $user;
  }

  // By default if a user has 'administer taxonomy' right, he may admin
  // this module
  if (user_access('administer taxonomy')) {
    return TRUE;
  }

  if (!is_object($vocabulary)) {
    return FALSE;
  }

  // Which vids are used with this module
  $vids = variable_get('taxonomy_access_user_vids', array());

  // The vid is not controlled by this module
  if (array_search($vocabulary->vid, $vids) === FALSE) {
    return FALSE;
  }

  $result = db_query_range('SELECT 1 FROM {term_data} td
    WHERE td.vid = %d AND grant_admin(tid,%d) = 1',
    $vocabulary->vid,
    $account->uid, 0, 1);

  return (bool) db_fetch_array($result);
}


/**
 * This function controls access to the module administration forms
 */
function taxonomy_access_user_access_form_access($tauid) {
  global $user;

  if (!is_object($tauid)) {
    return FALSE;
  }

  // By default if a user has 'administer taxonomy' right, he may admin
  // this module
  if (user_access('administer taxonomy')) {
    return TRUE;
  }

  // We already know the user can access this term
  if ($user->uid == $tauid->uid && $tauid->grant_admin === '1') {
    return TRUE;
  }

  // Else verify with the database
  $result = db_query('SELECT {grant_admin}(tid,%d) FROM {term_access_user} WHERE tauid = %d', $user->uid, $tauid->tauid);

  if ($row = db_fetch_array($result)) {
    return (reset($row) == 1);
  }
  return FALSE;
}




/**
 * Implementation of hook_db_rewrite_sql().
 * This function controls whether the user can display or not term list
 */
function taxonomy_access_user_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
  global $user;
  switch ($primary_table) {
  case 't':
  case '{term_data}':
    $return = array();
    if (user_access('administer taxonomy') === FALSE) {
      if ($primary_field === 'tid') {
        $vids = variable_get('taxonomy_access_user_vids', array());
        $uid = !empty($user->uid)? $user->uid: 0;
        $uid = intval($uid);
        $return['where'] = "$primary_table.vid NOT IN('". implode($vids, "','") ."') OR {grant_view}($primary_table.tid, ". $uid .")";
      }
    }
    return $return;
    break;
  }
}


/**
 * Implementation of hook_init().
 * This function verify the SQL functions are still here or it reinstall them
 */
function taxonomy_access_user_init() {
  global $db_url;
  $url = parse_url($db_url);

  $ops = array('grant_view', 'grant_update', 'grant_delete', 'grant_admin');

  $result = db_query("SHOW FUNCTION STATUS
    WHERE Db = '%s' AND Name IN ('{". implode($ops, '\',\'') ."}');",
    drupal_substr($url['path'], 1));

  for ($i=0; db_fetch_array($result); $i++);
  if ($i !== count($ops)) {
    module_load_include('inc', 'taxonomy_access_user');
    taxonomy_access_user_sql_uninstall();
    taxonomy_access_user_sql_install();
  }
}



